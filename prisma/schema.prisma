generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Category {
  id          String  @id @default(cuid())
  uuid        String  @db.VarChar(255)
  userId      String  @db.VarChar(255)
  name        String  @db.VarChar(255)
  description String  @db.Text
  maxPerDay   Int?
  sortOrder   Int     @default(0)
  color       String? @db.VarChar(32)
  todos       Todo[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Schedule {
  id     String @id @default(cuid())
  userId String @db.VarChar(255)
  todoId String @unique @db.VarChar(255)
  name   String @db.VarChar(255)
  count  Int    @default(1) @db.SmallInt
  unit   String @db.VarChar(255)

  todo Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)

  @@unique([userId, todoId])
}

model Todo {
  id                String    @id @default(cuid())
  categoryId        String
  userId            String
  created           DateTime  @default(now()) @db.Timestamp(6)
  startDate         DateTime  @default(now()) @db.DateTime(0)
  name              String    @db.VarChar(255)
  notes             String?   @db.Text
  size              String    @db.VarChar(32)
  priority          String    @default("NORMAL") @db.VarChar(32)
  status            String    @db.VarChar(32)
  completedDateTime DateTime? @db.DateTime(6)
  sortOrder         Int       @default(0)
  schedule          Schedule?

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  categories    Category[]
  todos         Todo[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
