generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model categories {
  id          Int     @id @default(autoincrement()) @db.UnsignedSmallInt
  uuid        String  @db.VarChar(255)
  user_uuid   String  @db.VarChar(255)
  name        String  @db.VarChar(255)
  description String  @db.Text
  maxPerDay   Int?
  sortOrder   Int     @default(0)
  color       String? @db.VarChar(32)
}

model schedules {
  id      Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  user_id String @db.VarChar(255)
  todo_id String @db.VarChar(255)
  name    String @db.VarChar(255)
  count   Int    @db.SmallInt
  unit    String @db.VarChar(255)
}

model todos {
  id                Int       @id @default(autoincrement()) @db.UnsignedSmallInt
  uuid              String    @db.VarChar(255)
  created           DateTime  @default(now()) @db.Timestamp(6)
  startDate         DateTime  @default(now()) @db.DateTime(0)
  name              String    @db.VarChar(255)
  notes             String?   @db.Text
  size              String    @db.VarChar(32)
  priority          String    @default("NORMAL") @db.VarChar(32)
  status            String    @db.VarChar(32)
  completedDateTime DateTime? @db.DateTime(6)
  sortOrder         Int       @default(0)
}

model todos_to_categories {
  id          Int    @id @default(autoincrement()) @db.UnsignedSmallInt
  category_id String @db.VarChar(255)
  user_id     String @db.VarChar(255)
  todo_uuid   String @db.VarChar(255)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}